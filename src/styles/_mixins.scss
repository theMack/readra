@use './tokens' as tokens;
@use '../../styles/mixins' as mix;
// Media query mixins
@mixin respond-to($breakpoint) {
  @if $breakpoint == xs {
    @media (max-width: #{ $breakpoint-sm - 1 }) { @content; }
  } @else if $breakpoint == sm {
    @media (min-width: $breakpoint-sm) and (max-width: #{ $breakpoint-md - 1 }) { @content; }
  } @else if $breakpoint == md {
    @media (min-width: $breakpoint-md) and (max-width: #{ $breakpoint-lg - 1 }) { @content; }
  } @else if $breakpoint == lg {
    @media (min-width: $breakpoint-lg) and (max-width: #{ $breakpoint-xl - 1 }) { @content; }
  } @else if $breakpoint == xl {
    @media (min-width: $breakpoint-xl) and (max-width: #{ $breakpoint-xxl - 1 }) { @content; }
  } @else if $breakpoint == xxl {
    @media (min-width: $breakpoint-xxl) { @content; }
  }
}

@mixin respond-above($breakpoint) {
  @if $breakpoint == xs {
    @media (min-width: $breakpoint-sm) { @content; }
  } @else if $breakpoint == sm {
    @media (min-width: $breakpoint-md) { @content; }
  } @else if $breakpoint == md {
    @media (min-width: $breakpoint-lg) { @content; }
  } @else if $breakpoint == lg {
    @media (min-width: $breakpoint-xl) { @content; }
  } @else if $breakpoint == xl {
    @media (min-width: $breakpoint-xxl) { @content; }
  }
}

@mixin respond-below($breakpoint) {
  @if $breakpoint == sm {
    @media (max-width: #{ $breakpoint-sm - 1 }) { @content; }
  } @else if $breakpoint == md {
    @media (max-width: #{ $breakpoint-md - 1 }) { @content; }
  } @else if $breakpoint == lg {
    @media (max-width: #{ $breakpoint-lg - 1 }) { @content; }
  } @else if $breakpoint == xl {
    @media (max-width: #{ $breakpoint-xl - 1 }) { @content; }
  } @else if $breakpoint == xxl {
    @media (max-width: #{ $breakpoint-xxl - 1 }) { @content; }
  }
}

// Typography mixins
@mixin heading-1 {
  font-size: 2.5rem;
  font-weight: 700;
  line-height: 1.2;
  @include respond-below(md) { font-size: 2rem; }
  @include respond-below(sm) { font-size: 1.75rem; }
}

@mixin heading-2 {
  font-size: 2rem;
  font-weight: 700;
  line-height: 1.25;
  @include respond-below(md) { font-size: 1.75rem; }
  @include respond-below(sm) { font-size: 1.5rem; }
}

@mixin heading-3 {
  font-size: 1.5rem;
  font-weight: 600;
  line-height: 1.3;
  @include respond-below(md) { font-size: 1.35rem; }
  @include respond-below(sm) { font-size: 1.25rem; }
}

@mixin heading-4 {
  font-size: 1.25rem;
  font-weight: 600;
  line-height: 1.4;
  @include respond-below(sm) { font-size: 1.125rem; }
}

// Layout mixins
@mixin flex-center {
  display: flex;
  align-items: center;
  justify-content: center;
}

@mixin flex-between {
  display: flex;
  align-items: center;
  justify-content: space-between;
}

@mixin flex-column {
  display: flex;
  flex-direction: column;
}

// Cards and containers
@mixin card {
  background-color: white;
  border-radius: $border-radius-md;
  box-shadow: $shadow-sm;
  overflow: hidden;
}

@mixin container {
  width: 100%;
  max-width: 1200px;
  margin: 0 auto;
  padding: 0 $spacing-md;

  @include respond-above(md) {
    padding: 0 $spacing-lg;
  }
}

// Truncate text with ellipsis or line clamp
@mixin truncate($lines: 1) {
  @if $lines == 1 {
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
  } @else {
    display: -webkit-box;
    -webkit-line-clamp: $lines;
    line-clamp: $lines;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
}

// Buttons
@mixin button-base {
  display: inline-flex;
  align-items: center;
  justify-content: center;
  padding: $spacing-sm $spacing-md;
  font-weight: 500;
  border-radius: $border-radius-md;
  transition: $transition-base;
  cursor: pointer;
  border: none;
  font-family: $font-family-base;
  font-size: 1rem;
  line-height: 1.5;
  text-decoration: none;
}

@mixin button-primary {
  @include button-base;
  background-color: $primary-color;
  color: white;

  &:hover {
    background-color: color.adjust($primary-color, $lightness: -10%);
  }

  &:focus {
    outline: none;
    box-shadow: 0 0 0 3px rgba($primary-color, 0.4);
  }

  &:active {
    background-color: color.adjust($primary-color, $lightness: -15%);
  }

  &:disabled {
    background-color: color.adjust($primary-color, $lightness: 20%);
    cursor: not-allowed;
  }
}

@mixin button-secondary {
  @include button-base;
  background-color: white;
  color: $primary-color;
  border: 1px solid $primary-color;

  &:hover {
    background-color: rgba($primary-color, 0.05);
  }

  &:focus {
    outline: none;
    box-shadow: 0 0 0 3px rgba($primary-color, 0.3);
  }

  &:active {
    background-color: rgba($primary-color, 0.1);
  }

  &:disabled {
    color: color.adjust($primary-color, $lightness: 20%);
    border-color: color.adjust($primary-color, $lightness: 20%);
    cursor: not-allowed;
  }
}

// Forms
@mixin input {
  width: 100%;
  padding: $spacing-sm $spacing-md;
  font-size: 1rem;
  line-height: 1.5;
  color: $text-primary;
  background-color: white;
  border: 1px solid $border-color;
  border-radius: $border-radius-md;
  transition: $transition-base;

  &:focus {
    outline: none;
    border-color: $primary-color;
    box-shadow: 0 0 0 3px rgba($primary-color, 0.2);
  }

  &:disabled {
    background-color: $background-light;
    cursor: not-allowed;
  }
}

